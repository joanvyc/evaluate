#!/bin/bash

source ${PARAEVALUAR_HOME}/paraevaluar.utils "eval"

function create_omp {
  eval $_PARAEVALUAR_DEBUG_ && echo -n "Creating OMP... "
	if eval $OMP_ENABLED;
	then
		for base in ${JOBS_DIR}/*;
		do
			for i in ${OMP_THREADS_array};
			do
				cp -r ${base} ${base}-${i}omp;
				sed -i "s|\(#SBATCH --cpus-per-task\).*|\1 ${i}|g" ${base}-${i}omp;
			done				
			\rm -f ${base};
		done
	fi
  eval $_PARAEVALUAR_DEBUG_ && echo "done"
}

function create_mpi {
  eval $_PARAEVALUAR_DEBUG_ && echo -n "Creating MPI... "
	if eval $MPI_ENABLED
	then
		for base in ${JOBS_DIR}/*;
		do
			for i in ${MPI_RANKS_array};
			do
				cp -r ${base} ${base}-${i}mpi;
				sed -i "s|\(#SBATCH --ntasks\).*|\1 ${i}|g" ${base}-${i}mpi;
			done				
			\rm -f ${base};
		done
	fi
  eval $_PARAEVALUAR_DEBUG_ && echo "done"
}

function create_input {
	if eval $INPUT_ENABLED;
	then
    for BINARY in $BINARY_array;
    do
      for INPUT in ${INPUT_array};
      do
        BASENAME="${BINARY}-$(basename $INPUT | rev | cut -d'.' -f2- | rev)"
        OUTPUT=${BASENAME}.out

        (
        echo "s|##binary##|${BINARY}|g;"

        echo "s|##input##|${INPUT}|g;"
        echo "s|##output##|${OUTPUT}|g;"

        echo "s|&gt;|>|g;"
        ) > ${PROJECT_NAME}/command.sed

        \cp ${PROJECT_NAME}/base ${JOBS_DIR}/${BASENAME}
        sed -i -f "${PROJECT_NAME}/command.sed" ${JOBS_DIR}/${BASENAME};
      done				
    done
		\rm -f ${base};
	else
    for BINARY in $BINARY_array;
    do
      INPUT="${BINARY}-base";
      \cp ${PROJECT_NAME}/base ${JOBS_DIR}/${INPUT};
    done
	fi
}

function create_directories {
	for i in ${JOBS_DIR}/*;
	do
		local WDIR=${PROJECT_NAME}/runs/`basename $i`;
		mkdir -p $WDIR;
		cp ${i} $WDIR/jobscript.sh;
		chmod +x $WDIR/jobscript.sh;
		if ! [ -z "$(ls -A ${PROJECT_NAME}/files)" ];
		then
			cp -rf ${PROJECT_NAME}/files/* $WDIR;
		fi
	done
}

function run_configurations {
	local CDIR=`pwd -P`

	for i in ${PROJECT_NAME}/runs/*;
	do
		echo -n "Entering $i... "
		cd $i;
		echo "done."

		if $JOB_SCRIPT_ENABLED;
		then
			case $JOB_MANAGER in
				"slurm")
					sbatch jobscript.sh
					;;
				*)
					cd $CDIR;
					continue;
					;;
			esac
		else
			echo -n "Running script... "
			./jobscript.sh > jobscript.out
			echo "done."
		fi

		echo -n "Leaving $i... "
		cd $CDIR;
		echo "done."
	done

	cd $CDIR;
}

create_binaries;
create_input;
create_mpi;
create_omp;

create_directories;
run_configurations;
