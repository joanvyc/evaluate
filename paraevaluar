#!/bin/bash

RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

IGNORE_GOLDEN=false;
VERBOSE=false;
PLOT=false;
NOCLEANUP=false;
N=3
GNUTIME=/usr/bin/time

function show_error {
	>&2 echo -e "${RED}${1}${NC}";
}

function error_n_exit {	
	$NOCLEANUP || echo -e "=> Removing $dir.";
	$NOCLEANUP || rm -rf $dir;
	trap - SIGINT
    show_error "$1";
    exit $2;
}

function pars_args {
	if [ $# -eq 0 ]
		then
			>&2 usage;
			exit 1;
	fi
	
    POSITIONAL=();
	while [[ $# -gt 0 ]] && [[ "$(echo $1 | cut -c-1)" == "-" ]]; 
        do
                key="$1";
                case $key in
			-N)
				N=$2;
				shift # past argument
				shift # past value
				;;
            -i|--ignore-golden)
                IGNORE_GOLDEN=true;
                shift # past argument
                ;;
			-a|--arguments)
				ARGUMENTS="$ARGUMENTS $2";
				shift # past argument
				shift # past value
				;;
			-v|--verbose)
				VERBOSE=true;
				shift # past argument
				;;
			-o|--output)
				OUTPUT=$2;
				shift # past argument
				shift # past value
				;;
			-p|--plot)
				PLOT=true;
				command -v gnuplot >/dev/null || error_n_exit "Error: You are trying to plot data and gnuplot is not installed"
				shift # past argument
				;;
            -t|--time-path)
                GNUTIME="$2"
                shift # past argument
                shift # past value
                ;;
			--no-cleanup)
				NOCLEANUP=true;
				shift # past argument
				;;
			--clean)
				echo -e "=> Cleaning working directory.";
				rm -rf evaldir-*;
				echo -e "=> Done.";
				exit 0;
				shift # past argument
				;;
            -h|--help)
                >&2 usage;
                exit 1;
                ;;
            *)    # unknown option
	     		show_error "Unknown option: $1";
                >&2 usage;
				exit 2;
                ;;
            esac;
        done
	ORIGINAL=$1;
	shift;
	OPTIMIZED=$@;

	if [ ! -f $ORIGINAL ]; then
		error_n_exit "Error: File not found \"${ORIGINAL}\"" 3;
	fi

	for program in $OPTIMIZED; do
		if [ ! -f $program ]; then
			error_n_exit "Error: File not found \"${program}\"" 3;
		fi
	done

}

function usage {
	echo -e "Usage:	paraevaluar [OPTIONS]... original [updated]...";
	echo -e "\tOPTIONS:"
	echo -e "\t\t-h|--help\t\tprint this usage."
	echo -e "\t\t-N ITERATIONS\t\tspecify the number of iterations each binary will be executed."
	echo -e "\t\t-o|--output FILE\tappends the result of the evaluation to the FILE"
	echo -e "\t\t-i|--ignore-golden\tdon't abort when output doesn't match golden output."
    echo -e "\t\t-a|--arguments=ARGUMENT\tappend ARGUMENT to the argument list."
	echo -e "\t\t-p|--plots\t\tplot average time of different versions."
    echo -e "\t\t-t|--time-path\t\tspecify where is the path of GNU/Time(Default:/usr/bin/time)"
	echo -e "\t\t--no-cleanup\t\tkeeps the intermediate files used by the program."
	echo -e "\t\t--clean\t\t\tdeletes all evaldir in the current directory."
}

trap -- 'error_n_exit "\nInterrupt signal received" 130' SIGINT;

pars_args $@;

# Creating working directory
while : ; 
do
	name=$(date '+%F %T' | sha256sum | cut -c-10);
	dir=evaldir-$name;
	echo -e "=> Creating working dir $dir";
	mkdir $dir && break;
	echo -e "${RED}==>Failed to create dir $dir";
done
if [ -z ${OUTPUT+x} ]; then OUTPUT="$dir/output.dat"; fi


# Creating golden outpu
echo -e "=> Generating golden output."
$PWD/$ORIGINAL $ARGUMENTS > $dir/golden.out;
err=$?;
if [[ $err -eq 130 ]]; then error_n_exit "\nInterrupt signal received" 130; fi
if [[ $err -ne 1 ]]; then error_n_exit "The execution of $ORIGINAL finishied with exit code $err" $err; fi


# Runing time tests
START=1
echo -e "=> Running $N time tests on original binary."
for i in `seq $START $N`;
do
	$VERBOSE && echo -e "\t==> Running time test on original binary. (Test $i)";
	$GNUTIME -f "%e %P" -a -o $dir/time_original $PWD/$ORIGINAL $ARGUMENTS > /dev/null;
	if [[ $? -eq 130 ]]; then error_n_exit "\nInterrupt signal received" 130; fi
done

nu=1;
for program in $OPTIMIZED;
do
	echo -e "=> Generating output of optimized binary $nu ($program).";
	$PWD/$program $ARGUMENTS > $dir/optimized_$nu.out;
	if [[ $? -eq 130 ]]; then error_n_exit "\nInterrupt signal received" 130; fi
	echo -e "=> Checking output of optimized binary $nu ($program).";
	if [[ "$(cat $dir/golden.out | sha256sum )" == "$(cat $dir/optimized_$nu.out | sha256sum )" ]];
	then
		echo -e "${GREEN}==> Output match.${NC}";
	else	
		if $IGNORE_GOLDEN;
		then
			echo -e "${YELLOW}==> Waring: Output of optimized code number $nu does not match golden output.${NC}"
		else
			echo -e "${RED}==> Error: Output of optimized code number $nu does not match golden output.${NC}"
			error_n_exit "Aborting due to output missmatch" 3;
		fi

	fi

    echo -e "=> Running $N time tests on original binary.";
	for i in `seq $START $N`;
	do
		$VERBOSE && echo -e "\t==> Running time test on optimized binary $nu. (Test $i)";
		$GNUTIME -f "%e %P" -a -o $dir/time_update_$nu $PWD/$program $ARGUMENTS > /dev/null;
		if [[ $? -eq 130 ]]; then error_n_exit "\nInterrupt signal received" 130; fi
	done
	nu=$((nu + 1));
done

function calculate_values {
	FIRST=true;
	while read line;
	do 
		CUR_E=$(echo ${line}       | awk '{print $1}');
		CUR_P=$(echo ${line//[%]/} | awk '{print "(" $1 "*" $2 ") / 100"}' | bc -l);
		if $FIRST; 
		then
			AVG_E[$2]=$CUR_E;
			MAX_E[$2]=$CUR_E;	
			MIN_E[$2]=$CUR_E;

			AVG_P[$2]=$CUR_P
			MAX_P[$2]=$CUR_P
			MIN_P[$2]=$CUR_P
			FIRST=false;
		else
			if (( $(echo "${MAX_E[${2}]} < ${CUR_E}" |bc -l) )); then MAX_E[$2]=$CUR_E; fi	
			if (( $(echo "${MIN_E[${2}]} > ${CUR_E}" |bc -l) )); then MIN_E[$2]=$CUR_E; fi	
			AVG_E[$2]=$(echo "${CUR_E} + ${AVG_E[${2}]}" |bc -l);

			if (( $(echo "${MAX_P[${2}]} < ${CUR_P}" |bc -l) )); then MAX_P[$2]=$CUR_P; fi	
			if (( $(echo "${MIN_P[${2}]} > ${CUR_P}" |bc -l) )); then MIN_P[$2]=$CUR_P; fi	
			AVG_P[$2]=$(echo "${CUR_P} + ${AVG_P[${2}]}" |bc -l);
		fi
	done < $1;

	AVG_E[$2]=$(echo "${AVG_E[${2}]} / ${N}" | bc -l | awk '{printf("%.4f\n", $1)}');
	AVG_P[$2]=$(echo "${AVG_P[${2}]} / ${N}" | bc -l | awk '{printf("%.4f\n", $1)}');
    if (( $(echo "${AVG_E} <= 0" |bc -l) )); then error_n_exit "That was too quick." 5; fi
    if (( $(echo "${AVG_P} <= 0" |bc -l) )); then error_n_exit "That was too quick." 5; fi
}

echo -e "=> Computing evaluation.";
(
echo ".pl 50"
echo ".TS H"
echo "allbox, center;"
echo "l l l l l l l l l.";
echo "."
echo -e "Program\tMaxE\tMinE\tAvgE\tSpeedUpE\tMaxCPU\tMinCPU\tAvgCPU\tSpeedUpCPU"
echo ".TH"
) > $dir/tablefile;  

calculate_values $dir/time_original 0;
(
echo -e -n "Original\t";
echo -e -n "${MAX_E[0]}\t";
echo -e -n "${MIN_E[0]}\t";
echo -e -n "${AVG_E[0]}\t";
echo -e -n "-\t";
echo -e -n "${MAX_P[0]}" | awk '{printf("%.2f\t", $1)}';
echo -e -n "${MIN_P[0]}" | awk '{printf("%.2f\t", $1)}';
echo -e -n "${AVG_P[0]}\t";
echo -e    "-\t";
) >> $dir/tablefile;
$PLOT && echo "Original		${AVG_E[0]}" >> $dir/plotfile
nu=1
for programs in $OPTIMIZED;
do
	calculate_values $dir/time_update_$nu $nu;
	(
	echo -e -n "$programs\t";
	echo -e -n "${MAX_E[${nu}]}\t";
	echo -e -n "${MIN_E[${nu}]}\t";
	echo -e -n "${AVG_E[${nu}]}\t";
	echo -e    "${AVG_E[0]} / ${AVG_E[${nu}]}" | bc -l | awk '{printf("%.4f\t", $1)}';
	echo -e -n "${MAX_P[${nu}]}" | awk '{printf("%.2f\t", $1)}';
	echo -e -n "${MIN_P[${nu}]}" | awk '{printf("%.2f\t", $1)}';
	echo -e -n "${AVG_P[${nu}]}\t";
	echo    "${AVG_P[0]} / ${AVG_P[${nu}]}" | bc -l | awk '{printf("%.4f\n", $1)}';
	) >> $dir/tablefile;
	$PLOT && echo "${programs}	${AVG_E[${nu}]}" >> $dir/plotfile
	nu=$((nu + 1));
done
echo ".TE" >> $dir/tablefile

echo -e "\n\n${GREEN}Results for ${ORIGINAL}:${NC}";
tbl $dir/tablefile | groff -T ascii 2>/dev/null | awk '{ if (0!=length($1)) print $0}' | tee --append $OUTPUT;
echo -e "\n" >> $OUTPUT;
echo -e "\n";

$PLOT && echo "=> Creating plot.";
$PLOT && echo "
	set boxwidth 0.75
	set style fill solid
	set auto y
	set title \"Average time comparaison\"
	plot \"$dir/plotfile\" using 2:xtic(1) with boxes
	set yr [0:GPVAL_DATA_Y_MAX]
	pause -1 \"=> Hit return to continue\"
" > $dir/plotscript
$PLOT && gnuplot $dir/plotscript

$NOCLEANUP || echo -e "=> Removing $dir.";
$NOCLEANUP || rm -rf $dir;
trap - SIGINT
